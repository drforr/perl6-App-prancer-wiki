#!/usr/bin/env perl6

use v6;
use Web::Template::HTML; # XXX Designers shouldn't need to know this.
use App::Prancer::Routes;

my $tt = Web::Template::HTML.new;
$tt.set-path( 'views/' ); # XXX requires '/' there, grumble.

multi GET( '/' ) is route
	{
	return GET( 'wiki', 'Welcome' );
	}

sub MediaWiki( Str $content )
	{
	my $title = '';
	my $as-html = $content;

	$as-html ~~ s:g{ '<strike>' (.+? ) '</strike>' } = qq[<s>{$0}</s>];
	$as-html ~~ s:g{ "'''''" ( .+? ) "'''''" } = qq[<b><i>{$0}</i></b>];
	$as-html ~~ s:g{ "'''" ( .+? ) "'''" } = qq[<b>{$0}</b>];
	$as-html ~~ s:g{ "''" ( .+? ) "''" } = qq[<i>{$0}</i>];
	$as-html ~~ s:g{ '[[' ( <-[ | ]>+ ) '|' ( .+  ) ']]' } =
		qq[<a href="/wiki/$0">{$1}</a>]; 

#`(
  #Description 	You type 	You get
  #Character (inline) formatting – applies anywhere
  #
  #Description 		You type 			You get
  #
X #Italic text 		''italic''			<i>italic</i>
X #Bold text 		'''bold'''			<b>bold</b>
X #Bold and italic 	'''''bold & italic''''' 	<b><i>bold & italic</>
X #Strike text 		<strike> strike text </strike>	<strike>strike text</>
  #Escape wiki markup 	<nowiki>no ''markup''</nowiki>	no ''markup''
X #Escape wiki markup once 	
X #	[[Special:MyLanguage/API:Main page|API]]<nowiki/> extension
X #	<a href="/wiki/Special:MyLanguage/API:Main_Page">API</a> extension
  #
  #Section formatting – only at the beginning of the line
  #
  #Headings of different levels 	
  #
  #== Level 2 ==		Level 2
  #=== Level 3 ===		Level 3
  #==== Level 4 ====		Level 4
  #===== Level 5 =====		Level 5
  #====== Level 6 ======	Level 6
  #
  #    Skip Level 1, it is page name level.
  #    An article with 4 or more headings automatically creates a table of contents.
  #
  #Horizontal rule 	
  #
  #Text before
  #----
  #Text after
  #
  #Text before<hr/>Text after
  #
  #Bullet list 	
  #
  #* Start each line
  #* with an [[Wikipedia:asterisk|asterisk]] (*).
  #** More asterisks give deeper
  #*** and deeper levels.
  #* Line breaks <br />don't break levels.
  #*** But jumping levels creates empty space.
  #Any other start ends the list.
  #
  #    * Start each line
  #    * with an <a href="https://en.wikipedia.org/wiki/Number_Sign">asterisk</a> (*).
  #        * More asterisks give deeper
  #            * and deeper levels.
  #    * Line breaks
  #    * don't break levels.
  #
  #        *   * But jumping levels creates empty space.
  #
  #Any other start ends the list.
  #
  #
  #Numbered list 	
  #
  ## Start each line
  ## with a [[Wikipedia:Number_sign|number sign]] (#).
  ### More number signs give deeper
  #### and deeper
  #### levels.
  ## Line breaks <br />don't break levels.
  #### But jumping levels creates empty space.
  ## Blank lines
  #
  ## end the list and start another.
  #Any other start also
  #ends the list.
  #
  #	
  #
  #    Start each line
  #    with a number sign (#).
  #        More number signs give deeper
  #            and deeper
  #            levels.
  #    Line breaks
  #    don't break levels.
  #            But jumping levels creates empty space.
  #    Blank lines
  #
  #    end the list and start another.
  #
  #Any other start also ends the list.
  #Definition list 	
  #
  #;item 1
  #: definition 1
  #;item 2
  #: definition 2-1
  #: definition 2-2
  #
  #	
  #
  #item 1
  #    definition 1
  #item 2
  #    definition 2-1
  #    definition 2-2
  #
  #Indent text 	
  #
  #: Single indent
  #:: Double indent
  #::::: Multiple indent
  #
  #This workaround may harm accessibility.
  #	
  #
  #    Single indent
  #
  #        Double indent
  #
  #                    Multiple indent
  #
  #Mixture of different types of list 	
  #
  ## one
  ## two
  ##* two point one
  ##* two point two
  ## three
  ##; three item one
  ##: three def one
  ## four
  ##: four def one
  ##: this looks like a continuation
  ##: and is often used
  ##: instead <br />of <nowiki><br /></nowiki>
  ## five
  ### five sub 1
  #### five sub 1 sub 1
  ### five sub 2
  #
  #The usage of #: and *: for breaking a line within an item may also harm accessibility.
  #	
  #
  #    one
  #    two
  #        two point one
  #        two point two
  #    three
  #
  #    three item one
  #        three def one
  #
  #    four
  #
  #        four def one
  #        this looks like a continuation
  #        and is often used
  #        instead
  #        of <br />
  #
  #    five
  #        five sub 1
  #            five sub 1 sub 1
  #        five sub 2
  #
  #Preformatted text 	
  #
  # Start each line with a space.
  # Text is '''preformatted''' and
  # ''markups'' '''''can''''' be done.
  #
  #This way of preformatting only applies to section formatting. Character formatting markups are still effective.
  #	
  #
  #Start each line with a space.
  #Text is preformatted and
  #markups can be done.
  #
  #Preformatted text blocks 	
  #
  # <nowiki>Start with a space in the first column,
  #(before the <nowiki>).
  #
  #Then your block format will be
  #    maintained.
  # 
  #This is good for copying in code blocks:
  #
  #def function():
  #    """documentation string"""
  #
  #    if True:
  #        print True
  #    else:
  #        print False</nowiki>
  #
  #	
  #
  #Start with a space in the first column,
  #(before the <nowiki>).
  #
  #Then your block format will be
  #    maintained.
  #
  #This is good for copying in code blocks:
  #
  #def function():
  #    """documentation string"""
  #
  #    if True:
  #        print True
  #    else:
  #        print False
  #
  #Paragraphs
  #
  #MediaWiki ignores single line breaks. To start a new paragraph, leave an empty line. You can force a line break within a paragraph with the HTML tag <br />.
  #HTML tags
  #
  #Some HTML tags are allowed in MediaWiki, for example <code>, <div>, <span> and <font>. These apply anywhere you insert them.
  #Description 	You type 	You get
  #Inserted
  #(Displays as underline in most browsers) 	
  #
  #<ins>Inserted</ins>
  #
  #or
  #
  #<u>Underline</u>
  #
  #	
  #
  #Inserted
  #
  #or
  #
  #Underline
  #Deleted
  #(Displays as strikethrough in most browsers) 	
  #
  #<s>Struck out</s>
  #
  #or
  #
  #<del>Deleted</del>
  #
  #	
  #
  #Struck out
  #
  #or
  #
  #Deleted
  #Fixed width text 	
  #
  #<code>Source code</code>
  #
  #or
  #
  #<tt>Fixed width text</tt>
  #
  #	
  #
  #Source code
  #
  #or
  #
  #Fixed width text
  #Blockquotes 	
  #
  #Text before
  #<blockquote>Blockquote</blockquote>
  #Text after
  #
  #	
  #
  #Text before
  #
  #    Blockquote
  #
  #Text after
  #Comment 	
  #
  #<!-- This is a comment -->
  #Comments are visible only 
  #in the edit zone.
  #
  #	
  #
  #Comments are visible only in the edit zone.
  #Completely preformatted text 	
  #
  #<pre>Text is '''preformatted''' and 
  #''markups'' '''''cannot''''' be done</pre>
  #
  #For marking up of preformatted text, check the "Preformatted text" entry at the end of the previous table.
  #	
  #
  #Text is '''preformatted''' and 
  #''markups'' '''''cannot''''' be done
  #
  #Customized preformatted text 	
  #
  #<pre style="color: red">Text is '''preformatted''' 
  #with a style and 
  #''markups'' '''''cannot''''' be done
  #</pre>
  #
  #A CSS style can be named within the style property.
  #	
  #
  #Text is '''preformatted''' 
  #with a style and 
  #''markups'' '''''cannot''''' be done
  #
  #continued:
  #Description 	You type 	You get
  #Default preformatted text has a CSS attribute (white-space: pre-wrap;) to wrap the text according to available width 	
  #
  #<pre>
  #This long sentence is used to demonstrate text wrapping. This additional sentence makes the text even longer. This additional sentence makes the text even longer.
  #</pre>
  #
  #	
  #
  #This long sentence is used to demonstrate text wrapping. This additional sentence makes the text even longer. This additional sentence makes the text even longer.
  #
  #Customized preformatted text with disabled text wrapping 	
  #
  #<pre style="white-space: pre; 
  #white-space: -moz-pre; 
  #white-space: -pre; 
  #white-space: -o-pre;">
  #This long sentence is used to demonstrate text wrapping. This additional sentence makes the text even longer.
  #</pre>
  #
  #	
  #
  #This long sentence is used to demonstrate text wrapping. This additional sentence makes the text even longer.
  #
  #Inserting symbols
  #
  #Symbols and other special characters not available on your keyboard can be inserted through a special sequence of characters. Those sequences are called HTML entities. For example, the following sequence (entity) &rarr; when inserted will be shown as right arrow HTML symbol → and &mdash; when inserted will be shown as an em dash HTML symbol —.
  #Hover over any character to find out the symbol that it produces. Some symbols not available in the current font will appear as empty squares.
  #HTML symbol entities
  #Á 	á 	Â 	â 	´ 	Æ 	æ 	À 	à 	ℵ 	Α 	α 	& 	∧ 	∠ 	Å 	å 	≈ 	Ã 	ã 	Ä 	ä 	„ 	Β 	β 	¦ 	• 	∩ 	Ç 	ç 	¸ 	¢
  #Χ 	χ 	ˆ 	♣ 	≅ 	© 	↵ 	∪ 	¤ 	† 	‡ 	↓ 	⇓ 	° 	Δ 	δ 	♦ 	÷ 	É 	é 	Ê 	ê 	È 	è 	∅ 	  	  	Ε 	ε 	≡ 	Η 	η
  #Ð 	ð 	Ë 	ë 	€ 	∃ 	ƒ 	∀ 	½ 	¼ 	¾ 	⁄ 	Γ 	γ 	≥ 	> 	↔ 	⇔ 	♥ 	… 	Í 	í 	Î 	î 	¡ 	Ì 	ì 	ℑ 	∞ 	∫ 	Ι 	ι
  #¿ 	∈ 	Ï 	ï 	Κ 	κ 	Λ 	λ 	〈 	« 	← 	⇐ 	⌈ 	“ 	≤ 	⌊ 	∗ 	◊ 	‎ 	‹ 	‘ 	< 	¯ 	— 	µ 	· 	− 	Μ 	μ 	∇ 	  	–
  #≠ 	∋ 	¬ 	∉ 	⊄ 	Ñ 	ñ 	Ν 	ν 	Ó 	ó 	Ô 	ô 	Œ 	œ 	Ò 	ò 	‾ 	Ω 	ω 	Ο 	ο 	⊕ 	∨ 	ª 	º 	Ø 	ø 	Õ 	õ 	⊗ 	Ö
  #ö 	¶ 	∂ 	‰ 	⊥ 	Φ 	φ 	Π 	π 	ϖ 	± 	£ 	′ 	″ 	∏ 	∝ 	Ψ 	ψ 	" 	√ 	〉 	» 	→ 	⇒ 	⌉ 	” 	ℜ 	® 	⌋ 	Ρ 	ρ 	‏
  #› 	’ 	‚ 	Š 	š 	⋅ 	§ 	­ 	Σ 	σ 	ς 	∼ 	♠ 	⊂ 	⊆ 	∑ 	⊃ 	¹ 	² 	³ 	⊇ 	ß 	Τ 	τ 	∴ 	Θ 	θ 	ϑ 	  	Þ 	þ 	˜
  #× 	™ 	Ú 	ú 	↑ 	⇑ 	Û 	û 	Ù 	ù 	¨ 	ϒ 	Υ 	υ 	Ü 	ü 	℘ 	Ξ 	ξ 	Ý 	ý 	¥ 	ÿ 	Ÿ 	Ζ 	ζ 	‍ 	‌

  #Description 	You type 	You get
X #Copyright symbol		&copy;	©
X #Greek delta letter symbol 	&delta;	δ
X #Euro currency symbol		&euro;	€
)

	$as-html ~~ s:g{'&copy;'}	= q{©};
	$as-html ~~ s:g{'&delta;'}	= q{δ};
	$as-html ~~ s:g{'&euro;'}	= q{€};

	return ( $title, $as-html )
	}

multi POST( '/login' ) is route
	{
say $*PRANCER-ENV;
say $*PRANCER-ENV.<CONTENT_LENGTH>;

my $buf = $*PRANCER-ENV.<p6sgi.input>.read( $*PRANCER-ENV.<CONTENT_LENGTH> );
say $buf.decode;
	}

multi GET( 'wiki', Str $WikiPage ) is route
	{
	my $return-to = $*PRANCER-ENV.<HTTP_REFERER>;
	if $return-to
		{
		$return-to ~~ s{^ 'http://' <-[ / ]>+ '/wiki/'? } = '';
		}
	else
		{
		$return-to = '';
		}

	my $filename      = "pages/$WikiPage.wiki";
	my $content       = $filename.IO.slurp;
	my $modified      = $filename.IO.modified;
say $modified;
	my $last-modified = DateTime.new($modified);
say $last-modified;
	my ( $title, $html-content ) =
		MediaWiki( $content );
	
	return $tt.render(
		'main.tmpl',
TMPL_PATH => 'views/',
#logged_in   => True,
username => 'foo',
		content       => $html-content,
		last_modified => $last-modified, # XXX Internal template bug?
		return_to     => $return-to );
	}

prance;

# vim: ft=perl6
